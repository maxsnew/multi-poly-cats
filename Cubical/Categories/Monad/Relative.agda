-- Monad relative to a Relator
{-
   Monads as extension systems, i.e., in terms of unit and bind,
   deriving the rest of the structure
   https://ncatlab.org/nlab/show/extension+system
-}
{-# OPTIONS --safe --lossy-unification #-}
module Cubical.Categories.Monad.Relative where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Structure
open import Cubical.Data.Sigma
open import Cubical.Categories.Category hiding (isIso)
open import Cubical.Categories.Limits.AsRepresentable
open import Cubical.Categories.Functor renaming (ùüô‚ü®_‚ü© to funcId)
open import Cubical.Categories.NaturalTransformation.Base
open import Cubical.Categories.NaturalTransformation.Properties
open import Cubical.Categories.NaturalTransformation.More
open import Cubical.Categories.Functors.HomFunctor
open import Cubical.Categories.Constructions.BinProduct
open import Cubical.Categories.Instances.Sets
open import Cubical.Categories.Monad.Base
open import Cubical.Categories.Presheaf.Representable
open import Cubical.Categories.Presheaf.More
open import Cubical.Categories.Profunctor.Relator
open import Cubical.Categories.Profunctor.General
open import Cubical.Categories.Profunctor.FunctorComprehension
open import Cubical.Categories.Bifunctor.Redundant
open import Cubical.Categories.Displayed.Base
open import Cubical.Categories.Displayed.HLevels
open import Cubical.Categories.Displayed.HLevels.More
open import Cubical.Categories.Displayed.Limits.Limits
open import Cubical.Categories.Displayed.Section.Base
open import Cubical.Categories.Constructions.TotalCategory as TotalCat
open import Cubical.Categories.Constructions.TotalCategory.More as TotalCat
open import Cubical.Categories.Displayed.Functor
open import Cubical.Categories.Displayed.Properties
open import Cubical.Categories.Displayed.Constructions.StructureOver

open import Cubical.Categories.Displayed.Presheaf
open import Cubical.Foundations.Isomorphism.More

private
  variable
    ‚ÑìC ‚ÑìC' ‚ÑìD ‚ÑìD' ‚ÑìS : Level

module _ {C : Category ‚ÑìC ‚ÑìC'}{D : Category ‚ÑìD ‚ÑìD'}
         (J : C o-[ ‚ÑìS ]-* D)
         where
  open Category
  open Section
  open Functor·¥∞
  private
    module J = Bifunctor J
    variable
      a a' b b' : C .ob
      c d : D .ob
      f g h : C [ a , b ]
      œï œà : D [ c , d ]
      r s : ‚ü® J ‚üÖ a , c ‚üÜb ‚ü©

  record ExtensionSystem : Type (‚Ñì-max ‚ÑìC (‚Ñì-max (‚Ñì-max ‚ÑìD ‚ÑìD') ‚ÑìS)) where
   field
     T : C .ob ‚Üí D .ob
     Œ∑ : ‚ü® J ‚üÖ a , T a ‚üÜb ‚ü©
     bind : ‚ü® J ‚üÖ a , T b ‚üÜb ‚ü© ‚Üí D [ T a , T b ]
     -- x <- Œ∑(x); M = x. M
     bind-r : bind (Œ∑ {a = a}) ‚â° D .id
     -- x <- M; Œ∑(x)
     bind-l : {r : ‚ü® J ‚üÖ a , T b ‚üÜb ‚ü©} ‚Üí (J ‚ü™ bind r ‚ü´r) Œ∑ ‚â° r
     -- bind-comp : bind f ‚àò‚ü® C ‚ü© bind g ‚â° bind (bind f ‚àò‚ü® C ‚ü© g)
     bind-comp : {r : ‚ü® J ‚üÖ a , T a' ‚üÜb ‚ü©}{s : ‚ü® J ‚üÖ a' , T b ‚üÜb ‚ü©}
                ‚Üí bind r ‚ãÜ‚ü® D ‚ü© bind s ‚â° bind ((J ‚ü™ bind s ‚ü´r) r)

  module _ (E : ExtensionSystem) where
    private
      module E = ExtensionSystem E

    Kleisli : Category ‚ÑìC ‚ÑìS
    Kleisli .ob = C .ob
    Kleisli .Hom[_,_] a b = ‚ü® J ‚üÖ a , E.T b ‚üÜb ‚ü©
    Kleisli .id = E.Œ∑
    Kleisli ._‚ãÜ_ r s = (J ‚ü™ E.bind s ‚ü´r) r
    Kleisli .‚ãÜIdL f = E.bind-l
    Kleisli .‚ãÜIdR r =
      (Œª i ‚Üí (J ‚ü™ E.bind-r i ‚ü´r) r)
      ‚àô (Œª i ‚Üí J.Bif-R-id i r)
    Kleisli .‚ãÜAssoc r r' r'' =
      (Œª i ‚Üí (J.Bif-R-seq (E.bind r') (E.bind r'') (~ i)) r)
      ‚àô Œª i ‚Üí (J ‚ü™ E.bind-comp {r = r'}{s = r''} i ‚ü´r) r
    Kleisli .isSetHom = str (J ‚üÖ _ , E.T _ ‚üÜb)

    -- The Kleisli category comes almost by definition with a functor to D
    Fkd : Functor Kleisli D
    Fkd .Functor.F-ob = E.T
    Fkd .Functor.F-hom = E.bind
    Fkd .Functor.F-id = E.bind-r
    Fkd .Functor.F-seq f g = sym E.bind-comp

    -- Algebras for a relative monad are *structure* over objects of D
    record AlgebraOver (carrier : D .ob)
      : Type (‚Ñì-max (‚Ñì-max ‚ÑìC ‚ÑìD) (‚Ñì-max ‚ÑìD' ‚ÑìS)) where
      field
        bindA : ‚ü® J ‚üÖ a , carrier ‚üÜb ‚ü© ‚Üí D [ E.T a , carrier ]
        bindA-l : {r : ‚ü® J ‚üÖ a , carrier ‚üÜb ‚ü©}
                ‚Üí (J ‚ü™ bindA r ‚ü´r) E.Œ∑ ‚â° r
        bindA-comp : {r : Kleisli [ a , a' ]}{s : ‚ü® J ‚üÖ a' , carrier ‚üÜb ‚ü©}
                   ‚Üí E.bind r ‚ãÜ‚ü® D ‚ü© bindA s ‚â° bindA ((J ‚ü™ bindA s ‚ü´r) r)

    open AlgebraOver
    private
      -- This defines what it means for a morphism in D to be a homomorphism.
      A : StructureOver D _ _
      A .StructureOver.ob[_] = AlgebraOver
      A .StructureOver.Hom[_][_,_] œï B1 B2 =
        ‚àÄ {a} (r : ‚ü® J ‚üÖ a , _ ‚üÜb ‚ü©)
         ‚Üí œï ‚àò‚ü® D ‚ü© B1 .bindA r ‚â° B2 .bindA ((J ‚ü™ œï ‚ü´r) r)
      A .StructureOver.id·¥∞ {p = B} r = D .‚ãÜIdR _
        ‚àô cong (B .bindA) (sym (funExt‚Åª (J.Bif-R-id) r))
      A .StructureOver._‚ãÜ·¥∞_ {f = œï}{g = œà}{x·¥∞ = B1}{y·¥∞ = B2}{z·¥∞ = B3}
        œï-homo œà-homo r =
        sym (D .‚ãÜAssoc _ _ _)
        ‚àô cong‚ÇÇ (D ._‚ãÜ_) (œï-homo r) refl
        ‚àô œà-homo _
        ‚àô cong (B3 .bindA) (sym (funExt‚Åª (J.Bif-R-seq _ _) r))
      A .StructureOver.isPropHom·¥∞ = isPropImplicitŒ† Œª _ ‚Üí isPropŒ† Œª _ ‚Üí
        D .isSetHom _ _
    ALGEBRA·¥∞ : Category·¥∞ D _ _
    ALGEBRA·¥∞ = StructureOver‚ÜíCat·¥∞ A

    open UniversalElement·¥∞
    open NatTrans
    -- TODO
    -- ALGEBRA-liftsLimits : ‚àÄ ‚ÑìS ‚ÑìS' ‚Üí liftsLimits ALGEBRA·¥∞ ‚ÑìS ‚ÑìS'
    -- ALGEBRA-liftsLimits _ _ S limitOfS {D = F} F·¥∞ = record
    --   { vertex·¥∞    = LimAlg
    --   ; element·¥∞   = {!!}
    --   ; universal·¥∞ = {!!}
    --   } where
    --   -- module Lim = UniversalElement (limitOfS F)
    --   module D = Category D
    --   module Lim = UniversalElementNotation (limitOfS F)

    --   LimAlg : AlgebraOver Lim.vertex
    --   LimAlg .bindA j = Lim.intro
    --     (natTrans
    --       ((Œª s ‚Üí F·¥∞ .F-ob·¥∞ {x = s} _ .bindA ((J ‚ü™ Lim.element ‚ü¶ s ‚üß ‚ü´r) j)))
    --       commutes )
    --     where
    --       ps : N-ob-Type ((ŒîF ^opF) ‚üÖ E.T _ ‚üÜ) F
    --       ps =
    --       ((Œª s ‚Üí F·¥∞ .F-ob·¥∞ {x = s} _ .bindA ((J ‚ü™ Lim.element ‚ü¶ s ‚üß ‚ü´r) j)))
    --       opaque
    --         commutes : N-hom-Type ((ŒîF ^opF) ‚üÖ E.T _ ‚üÜ) F ps
    --         commutes = Œª f ‚Üí
    --           -- Better limit notation would help a lot here.
    --           D.‚ãÜIdL _
    --           ‚àô cong (F·¥∞ .F-ob·¥∞ _ .bindA)
    --             ( cong‚ÇÇ (J.Bif-homR _)
    --                     (sym (D.‚ãÜIdL _) ‚àô Lim.element .N-hom f)
    --                     refl
    --             ‚àô funExt‚Åª (J.Bif-R-seq _ _) _)
    --           ‚àô sym (F·¥∞ .F-hom·¥∞ {f = f} _ _)

    --   LimAlg .bindA-l = {!!}
    --   LimAlg .bindA-comp = {!!}

    hasPropHomsALGEBRA·¥∞ = hasPropHomsStructureOver A

    ALGEBRA : Category _ _
    ALGEBRA = ‚à´C ALGEBRA·¥∞

    Carrier : Functor ALGEBRA D
    Carrier = TotalCat.Fst

    FreeAlg : ‚àÄ c ‚Üí AlgebraOver (E.T c)
    FreeAlg c .bindA = E.bind
    FreeAlg c .bindA-l = E.bind-l
    FreeAlg c .bindA-comp = E.bind-comp

    KleisliToAlgebra : Functor Kleisli ALGEBRA
    KleisliToAlgebra = TotalCat.intro' Fkd FreeAlgS where
      FreeAlgS : Section _ _
      FreeAlgS = mkPropHomsSection hasPropHomsALGEBRA·¥∞
        FreeAlg
        Œª f r ‚Üí E.bind-comp

    Fck : Functor C Kleisli
    Fck = (FunctorComprehension Fck-ues) ^opF where
      Fck-Rel : C o-[ ‚ÑìS ]-* Kleisli
      Fck-Rel = J ‚àòFr Fkd
      Fck-spec : Profunctor (C ^op) (Kleisli ^op) ‚ÑìS
      Fck-spec = CurryBifunctor Fck-Rel

      open UniversalElement
      -- every Kleisli morphism
      --   r : ‚ü® J ‚üÖ c , E.T d ‚üÜb ‚ü©
      -- factors through
      --   Œ∑ : ‚ü® J ‚üÖ c , E.T c ‚üÜb ‚ü©
      Fck-ues : UniversalElements Fck-spec
      Fck-ues c .vertex = c
      Fck-ues c .element = E.Œ∑
      Fck-ues c .universal c' = isIsoToIsEquiv (
        (Œª z ‚Üí z)
        , (Œª _ ‚Üí E.bind-l)
        , (Œª _ ‚Üí E.bind-l))

    F : Functor C D
    F = Carrier ‚àòF KleisliToAlgebra ‚àòF Fck

    private
      -- test the definitional behavior of F
      _ : F ‚ü™ f ‚ü´ ‚â° E.bind ((J ‚ü™ f ‚ü´l) E.Œ∑)
      _ = refl
